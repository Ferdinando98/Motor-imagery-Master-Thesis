;; Auto-generated. Do not edit!


(when (boundp 'motor_imagery::MoveGoal)
  (if (not (find-package "MOTOR_IMAGERY"))
    (make-package "MOTOR_IMAGERY"))
  (shadow 'MoveGoal (find-package "MOTOR_IMAGERY")))
(unless (find-package "MOTOR_IMAGERY::MOVEGOAL")
  (make-package "MOTOR_IMAGERY::MOVEGOAL"))

(in-package "ROS")
;;//! \htmlinclude MoveGoal.msg.html


(defclass motor_imagery::MoveGoal
  :super ros::object
  :slots (_displacement _rpy _time _velocity ))

(defmethod motor_imagery::MoveGoal
  (:init
   (&key
    ((:displacement __displacement) (make-array 3 :initial-element 0.0 :element-type :float))
    ((:rpy __rpy) (make-array 3 :initial-element 0.0 :element-type :float))
    ((:time __time) 0.0)
    ((:velocity __velocity) 0.0)
    )
   (send-super :init)
   (setq _displacement __displacement)
   (setq _rpy __rpy)
   (setq _time (float __time))
   (setq _velocity (float __velocity))
   self)
  (:displacement
   (&optional __displacement)
   (if __displacement (setq _displacement __displacement)) _displacement)
  (:rpy
   (&optional __rpy)
   (if __rpy (setq _rpy __rpy)) _rpy)
  (:time
   (&optional __time)
   (if __time (setq _time __time)) _time)
  (:velocity
   (&optional __velocity)
   (if __velocity (setq _velocity __velocity)) _velocity)
  (:serialization-length
   ()
   (+
    ;; float64[3] _displacement
    (* 8    3)
    ;; float64[3] _rpy
    (* 8    3)
    ;; float64 _time
    8
    ;; float64 _velocity
    8
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; float64[3] _displacement
     (dotimes (i 3)
       (sys::poke (elt _displacement i) (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
       )
     ;; float64[3] _rpy
     (dotimes (i 3)
       (sys::poke (elt _rpy i) (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
       )
     ;; float64 _time
       (sys::poke _time (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
     ;; float64 _velocity
       (sys::poke _velocity (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; float64[3] _displacement
   (dotimes (i (length _displacement))
     (setf (elt _displacement i) (sys::peek buf ptr- :double)) (incf ptr- 8)
     )
   ;; float64[3] _rpy
   (dotimes (i (length _rpy))
     (setf (elt _rpy i) (sys::peek buf ptr- :double)) (incf ptr- 8)
     )
   ;; float64 _time
     (setq _time (sys::peek buf ptr- :double)) (incf ptr- 8)
   ;; float64 _velocity
     (setq _velocity (sys::peek buf ptr- :double)) (incf ptr- 8)
   ;;
   self)
  )

(setf (get motor_imagery::MoveGoal :md5sum-) "58fff735b5e1eb1a07f26b4a9a689731")
(setf (get motor_imagery::MoveGoal :datatype-) "motor_imagery/MoveGoal")
(setf (get motor_imagery::MoveGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# GOAL
float64[3] displacement
float64[3] rpy
float64 time
float64 velocity

")



(provide :motor_imagery/MoveGoal "58fff735b5e1eb1a07f26b4a9a689731")


