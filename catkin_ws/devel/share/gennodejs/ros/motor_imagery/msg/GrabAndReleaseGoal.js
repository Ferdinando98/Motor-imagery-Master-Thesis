// Auto-generated. Do not edit!

// (in-package motor_imagery.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;

//-----------------------------------------------------------

class GrabAndReleaseGoal {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.object_position = null;
      this.release_position = null;
    }
    else {
      if (initObj.hasOwnProperty('object_position')) {
        this.object_position = initObj.object_position
      }
      else {
        this.object_position = new Array(3).fill(0);
      }
      if (initObj.hasOwnProperty('release_position')) {
        this.release_position = initObj.release_position
      }
      else {
        this.release_position = new Array(3).fill(0);
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type GrabAndReleaseGoal
    // Check that the constant length array field [object_position] has the right length
    if (obj.object_position.length !== 3) {
      throw new Error('Unable to serialize array field object_position - length must be 3')
    }
    // Serialize message field [object_position]
    bufferOffset = _arraySerializer.float64(obj.object_position, buffer, bufferOffset, 3);
    // Check that the constant length array field [release_position] has the right length
    if (obj.release_position.length !== 3) {
      throw new Error('Unable to serialize array field release_position - length must be 3')
    }
    // Serialize message field [release_position]
    bufferOffset = _arraySerializer.float64(obj.release_position, buffer, bufferOffset, 3);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type GrabAndReleaseGoal
    let len;
    let data = new GrabAndReleaseGoal(null);
    // Deserialize message field [object_position]
    data.object_position = _arrayDeserializer.float64(buffer, bufferOffset, 3)
    // Deserialize message field [release_position]
    data.release_position = _arrayDeserializer.float64(buffer, bufferOffset, 3)
    return data;
  }

  static getMessageSize(object) {
    return 48;
  }

  static datatype() {
    // Returns string type for a message object
    return 'motor_imagery/GrabAndReleaseGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return 'df67bc06e81c56f0c9b1d234140979c8';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # GOAL
    float64[3] object_position
    float64[3] release_position
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new GrabAndReleaseGoal(null);
    if (msg.object_position !== undefined) {
      resolved.object_position = msg.object_position;
    }
    else {
      resolved.object_position = new Array(3).fill(0)
    }

    if (msg.release_position !== undefined) {
      resolved.release_position = msg.release_position;
    }
    else {
      resolved.release_position = new Array(3).fill(0)
    }

    return resolved;
    }
};

module.exports = GrabAndReleaseGoal;
