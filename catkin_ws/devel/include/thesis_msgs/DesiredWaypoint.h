// Generated by gencpp from file thesis_msgs/DesiredWaypoint.msg
// DO NOT EDIT!


#ifndef THESIS_MSGS_MESSAGE_DESIREDWAYPOINT_H
#define THESIS_MSGS_MESSAGE_DESIREDWAYPOINT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <thesis_msgs/Position.h>
#include <thesis_msgs/Orientation.h>
#include <thesis_msgs/LinearVelocity.h>
#include <thesis_msgs/AngularVelocity.h>

namespace thesis_msgs
{
template <class ContainerAllocator>
struct DesiredWaypoint_
{
  typedef DesiredWaypoint_<ContainerAllocator> Type;

  DesiredWaypoint_()
    : position()
    , orientation()
    , linearVelocity()
    , angularVelocity()  {
    }
  DesiredWaypoint_(const ContainerAllocator& _alloc)
    : position(_alloc)
    , orientation(_alloc)
    , linearVelocity(_alloc)
    , angularVelocity(_alloc)  {
  (void)_alloc;
    }



   typedef  ::thesis_msgs::Position_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef  ::thesis_msgs::Orientation_<ContainerAllocator>  _orientation_type;
  _orientation_type orientation;

   typedef  ::thesis_msgs::LinearVelocity_<ContainerAllocator>  _linearVelocity_type;
  _linearVelocity_type linearVelocity;

   typedef  ::thesis_msgs::AngularVelocity_<ContainerAllocator>  _angularVelocity_type;
  _angularVelocity_type angularVelocity;





  typedef boost::shared_ptr< ::thesis_msgs::DesiredWaypoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::thesis_msgs::DesiredWaypoint_<ContainerAllocator> const> ConstPtr;

}; // struct DesiredWaypoint_

typedef ::thesis_msgs::DesiredWaypoint_<std::allocator<void> > DesiredWaypoint;

typedef boost::shared_ptr< ::thesis_msgs::DesiredWaypoint > DesiredWaypointPtr;
typedef boost::shared_ptr< ::thesis_msgs::DesiredWaypoint const> DesiredWaypointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::thesis_msgs::DesiredWaypoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::thesis_msgs::DesiredWaypoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::thesis_msgs::DesiredWaypoint_<ContainerAllocator1> & lhs, const ::thesis_msgs::DesiredWaypoint_<ContainerAllocator2> & rhs)
{
  return lhs.position == rhs.position &&
    lhs.orientation == rhs.orientation &&
    lhs.linearVelocity == rhs.linearVelocity &&
    lhs.angularVelocity == rhs.angularVelocity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::thesis_msgs::DesiredWaypoint_<ContainerAllocator1> & lhs, const ::thesis_msgs::DesiredWaypoint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace thesis_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::thesis_msgs::DesiredWaypoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::thesis_msgs::DesiredWaypoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::thesis_msgs::DesiredWaypoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::thesis_msgs::DesiredWaypoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::thesis_msgs::DesiredWaypoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::thesis_msgs::DesiredWaypoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::thesis_msgs::DesiredWaypoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a7144ae7a25595aa8a475a2f0b514fe7";
  }

  static const char* value(const ::thesis_msgs::DesiredWaypoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa7144ae7a25595aaULL;
  static const uint64_t static_value2 = 0x8a475a2f0b514fe7ULL;
};

template<class ContainerAllocator>
struct DataType< ::thesis_msgs::DesiredWaypoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "thesis_msgs/DesiredWaypoint";
  }

  static const char* value(const ::thesis_msgs::DesiredWaypoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::thesis_msgs::DesiredWaypoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Position position\n"
"Orientation orientation\n"
"LinearVelocity linearVelocity\n"
"AngularVelocity angularVelocity\n"
"================================================================================\n"
"MSG: thesis_msgs/Position\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: thesis_msgs/Orientation\n"
"float64 w\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: thesis_msgs/LinearVelocity\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: thesis_msgs/AngularVelocity\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::thesis_msgs::DesiredWaypoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::thesis_msgs::DesiredWaypoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position);
      stream.next(m.orientation);
      stream.next(m.linearVelocity);
      stream.next(m.angularVelocity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DesiredWaypoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::thesis_msgs::DesiredWaypoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::thesis_msgs::DesiredWaypoint_<ContainerAllocator>& v)
  {
    s << indent << "position: ";
    s << std::endl;
    Printer< ::thesis_msgs::Position_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "orientation: ";
    s << std::endl;
    Printer< ::thesis_msgs::Orientation_<ContainerAllocator> >::stream(s, indent + "  ", v.orientation);
    s << indent << "linearVelocity: ";
    s << std::endl;
    Printer< ::thesis_msgs::LinearVelocity_<ContainerAllocator> >::stream(s, indent + "  ", v.linearVelocity);
    s << indent << "angularVelocity: ";
    s << std::endl;
    Printer< ::thesis_msgs::AngularVelocity_<ContainerAllocator> >::stream(s, indent + "  ", v.angularVelocity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // THESIS_MSGS_MESSAGE_DESIREDWAYPOINT_H
