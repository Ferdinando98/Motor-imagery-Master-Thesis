// Generated by gencpp from file motor_imagery/sendInitStateResponse.msg
// DO NOT EDIT!


#ifndef MOTOR_IMAGERY_MESSAGE_SENDINITSTATERESPONSE_H
#define MOTOR_IMAGERY_MESSAGE_SENDINITSTATERESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace motor_imagery
{
template <class ContainerAllocator>
struct sendInitStateResponse_
{
  typedef sendInitStateResponse_<ContainerAllocator> Type;

  sendInitStateResponse_()
    : initJointState()  {
    }
  sendInitStateResponse_(const ContainerAllocator& _alloc)
    : initJointState(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _initJointState_type;
  _initJointState_type initJointState;





  typedef boost::shared_ptr< ::motor_imagery::sendInitStateResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::motor_imagery::sendInitStateResponse_<ContainerAllocator> const> ConstPtr;

}; // struct sendInitStateResponse_

typedef ::motor_imagery::sendInitStateResponse_<std::allocator<void> > sendInitStateResponse;

typedef boost::shared_ptr< ::motor_imagery::sendInitStateResponse > sendInitStateResponsePtr;
typedef boost::shared_ptr< ::motor_imagery::sendInitStateResponse const> sendInitStateResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::motor_imagery::sendInitStateResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::motor_imagery::sendInitStateResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::motor_imagery::sendInitStateResponse_<ContainerAllocator1> & lhs, const ::motor_imagery::sendInitStateResponse_<ContainerAllocator2> & rhs)
{
  return lhs.initJointState == rhs.initJointState;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::motor_imagery::sendInitStateResponse_<ContainerAllocator1> & lhs, const ::motor_imagery::sendInitStateResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace motor_imagery

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::motor_imagery::sendInitStateResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motor_imagery::sendInitStateResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motor_imagery::sendInitStateResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motor_imagery::sendInitStateResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motor_imagery::sendInitStateResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motor_imagery::sendInitStateResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::motor_imagery::sendInitStateResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f72ac98c261a7db30a72292fcddffa92";
  }

  static const char* value(const ::motor_imagery::sendInitStateResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf72ac98c261a7db3ULL;
  static const uint64_t static_value2 = 0x0a72292fcddffa92ULL;
};

template<class ContainerAllocator>
struct DataType< ::motor_imagery::sendInitStateResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "motor_imagery/sendInitStateResponse";
  }

  static const char* value(const ::motor_imagery::sendInitStateResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::motor_imagery::sendInitStateResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] initJointState\n"
;
  }

  static const char* value(const ::motor_imagery::sendInitStateResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::motor_imagery::sendInitStateResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.initJointState);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct sendInitStateResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::motor_imagery::sendInitStateResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::motor_imagery::sendInitStateResponse_<ContainerAllocator>& v)
  {
    s << indent << "initJointState[]" << std::endl;
    for (size_t i = 0; i < v.initJointState.size(); ++i)
    {
      s << indent << "  initJointState[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.initJointState[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOTOR_IMAGERY_MESSAGE_SENDINITSTATERESPONSE_H
