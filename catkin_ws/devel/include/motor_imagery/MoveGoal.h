// Generated by gencpp from file motor_imagery/MoveGoal.msg
// DO NOT EDIT!


#ifndef MOTOR_IMAGERY_MESSAGE_MOVEGOAL_H
#define MOTOR_IMAGERY_MESSAGE_MOVEGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace motor_imagery
{
template <class ContainerAllocator>
struct MoveGoal_
{
  typedef MoveGoal_<ContainerAllocator> Type;

  MoveGoal_()
    : displacement()
    , rpy()
    , time(0.0)
    , velocity(0.0)  {
      displacement.assign(0.0);

      rpy.assign(0.0);
  }
  MoveGoal_(const ContainerAllocator& _alloc)
    : displacement()
    , rpy()
    , time(0.0)
    , velocity(0.0)  {
  (void)_alloc;
      displacement.assign(0.0);

      rpy.assign(0.0);
  }



   typedef boost::array<double, 3>  _displacement_type;
  _displacement_type displacement;

   typedef boost::array<double, 3>  _rpy_type;
  _rpy_type rpy;

   typedef double _time_type;
  _time_type time;

   typedef double _velocity_type;
  _velocity_type velocity;





  typedef boost::shared_ptr< ::motor_imagery::MoveGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::motor_imagery::MoveGoal_<ContainerAllocator> const> ConstPtr;

}; // struct MoveGoal_

typedef ::motor_imagery::MoveGoal_<std::allocator<void> > MoveGoal;

typedef boost::shared_ptr< ::motor_imagery::MoveGoal > MoveGoalPtr;
typedef boost::shared_ptr< ::motor_imagery::MoveGoal const> MoveGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::motor_imagery::MoveGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::motor_imagery::MoveGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::motor_imagery::MoveGoal_<ContainerAllocator1> & lhs, const ::motor_imagery::MoveGoal_<ContainerAllocator2> & rhs)
{
  return lhs.displacement == rhs.displacement &&
    lhs.rpy == rhs.rpy &&
    lhs.time == rhs.time &&
    lhs.velocity == rhs.velocity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::motor_imagery::MoveGoal_<ContainerAllocator1> & lhs, const ::motor_imagery::MoveGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace motor_imagery

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::motor_imagery::MoveGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motor_imagery::MoveGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motor_imagery::MoveGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motor_imagery::MoveGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motor_imagery::MoveGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motor_imagery::MoveGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::motor_imagery::MoveGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "58fff735b5e1eb1a07f26b4a9a689731";
  }

  static const char* value(const ::motor_imagery::MoveGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x58fff735b5e1eb1aULL;
  static const uint64_t static_value2 = 0x07f26b4a9a689731ULL;
};

template<class ContainerAllocator>
struct DataType< ::motor_imagery::MoveGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "motor_imagery/MoveGoal";
  }

  static const char* value(const ::motor_imagery::MoveGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::motor_imagery::MoveGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# GOAL\n"
"float64[3] displacement\n"
"float64[3] rpy\n"
"float64 time\n"
"float64 velocity\n"
;
  }

  static const char* value(const ::motor_imagery::MoveGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::motor_imagery::MoveGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.displacement);
      stream.next(m.rpy);
      stream.next(m.time);
      stream.next(m.velocity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MoveGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::motor_imagery::MoveGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::motor_imagery::MoveGoal_<ContainerAllocator>& v)
  {
    s << indent << "displacement[]" << std::endl;
    for (size_t i = 0; i < v.displacement.size(); ++i)
    {
      s << indent << "  displacement[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.displacement[i]);
    }
    s << indent << "rpy[]" << std::endl;
    for (size_t i = 0; i < v.rpy.size(); ++i)
    {
      s << indent << "  rpy[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.rpy[i]);
    }
    s << indent << "time: ";
    Printer<double>::stream(s, indent + "  ", v.time);
    s << indent << "velocity: ";
    Printer<double>::stream(s, indent + "  ", v.velocity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOTOR_IMAGERY_MESSAGE_MOVEGOAL_H
